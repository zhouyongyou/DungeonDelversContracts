const hre = require("hardhat");

async function main() {
    console.log("ЁЯФз ф┐ох╛й V25.0.4 хРИч┤Дф║ТщАг...\n");
    
    // V25.0.4 хРИч┤ДхЬ░хЭА
    const CONTRACTS = {
        DungeonCore: "0x5B64A5939735Ff762493D9B9666b3e13118c5722",
        Oracle: "0xEE322Eff70320759487f67875113C062AC1F4cfB", 
        Hero: "0xE44A7CA10bAC8B1042EeBd66ccF24c5b1D734b19",
        Relic: "0x91Bf924E9CEF490F7C999C1F083eE1636595220D",
        Party: "0x495bcE2D9561E0f7623fF244e4BA28DCFfEe71d9",
        DungeonMaster: "0xAAdE1919B2EA95cBBFcDEa41CBf9D48ae0d44cdF",
        DungeonStorage: "0xCE75345A01dB5c40E443624F86BDC45BabF7B6ec",
        AltarOfAscension: "0x56B62168734827b9b3D750ac1aB9F249e0a0EEd3",
        PlayerVault: "0x446a82f2003484Bdc83f29e094fcb66D01094db0",
        PlayerProfile: "0x3509d0f0cD6f7b518860f945128205ac4F426090",
        VIPStaking: "0x18d13f4FdE3245ABa6D0fb91597291e1F46b0661",
        SoulShard: "0xB73FE158689EAB3396B64794b573D4BEc7113412",
        USD: "0x9DC0b768533222fddbe6A9Bd71eAD96a7c612C61",
        VRFManager: "0xa94555C309Dd83d9fB0531852d209c46Fa50637f"
    };
    
    const [signer] = await hre.ethers.getSigners();
    console.log("хЯ╖шбМхЬ░хЭА:", signer.address);
    console.log("=" .repeat(60));
    
    let txCount = 0;
    const transactions = [];
    
    // ===========================================
    // 1. шинхоЪ DungeonCore чЪДцибч╡ДхЬ░хЭА
    // ===========================================
    console.log("\nЁЯПЫя╕П шинхоЪ DungeonCore цибч╡ДхЬ░хЭА...");
    console.log("-".repeat(60));
    
    const dungeonCoreABI = [
        "function setHeroAddress(address)",
        "function setRelicAddress(address)",  
        "function setPartyAddress(address)",
        "function setSoulShardAddress(address)",
        "function heroAddress() view returns (address)",
        "function relicAddress() view returns (address)",
        "function partyAddress() view returns (address)",
        "function soulShardAddress() view returns (address)"
    ];
    
    try {
        const dungeonCore = new hre.ethers.Contract(CONTRACTS.DungeonCore, dungeonCoreABI, signer);
        
        // шинхоЪ Hero хЬ░хЭА
        try {
            console.log(`шинхоЪ Hero хЬ░хЭА: ${CONTRACTS.Hero}`);
            const tx = await dungeonCore.setHeroAddress(CONTRACTS.Hero, { gasLimit: 200000 });
            transactions.push({ name: "DungeonCore.setHeroAddress", hash: tx.hash });
            txCount++;
            await tx.wait();
            console.log("тЬЕ Hero хЬ░хЭАшинхоЪхоМцИР");
        } catch (e) {
            console.log("тЭМ шинхоЪ Hero хЬ░хЭАхд▒цХЧ:", e.message);
        }
        
        // шинхоЪ Relic хЬ░хЭА
        try {
            console.log(`шинхоЪ Relic хЬ░хЭА: ${CONTRACTS.Relic}`);
            const tx = await dungeonCore.setRelicAddress(CONTRACTS.Relic, { gasLimit: 200000 });
            transactions.push({ name: "DungeonCore.setRelicAddress", hash: tx.hash });
            txCount++;
            await tx.wait();
            console.log("тЬЕ Relic хЬ░хЭАшинхоЪхоМцИР");
        } catch (e) {
            console.log("тЭМ шинхоЪ Relic хЬ░хЭАхд▒цХЧ:", e.message);
        }
        
        // шинхоЪ Party хЬ░хЭА
        try {
            console.log(`шинхоЪ Party хЬ░хЭА: ${CONTRACTS.Party}`);
            const tx = await dungeonCore.setPartyAddress(CONTRACTS.Party, { gasLimit: 200000 });
            transactions.push({ name: "DungeonCore.setPartyAddress", hash: tx.hash });
            txCount++;
            await tx.wait();
            console.log("тЬЕ Party хЬ░хЭАшинхоЪхоМцИР");
        } catch (e) {
            console.log("тЭМ шинхоЪ Party хЬ░хЭАхд▒цХЧ:", e.message);
        }
        
        // шинхоЪ SoulShard хЬ░хЭА
        try {
            console.log(`шинхоЪ SoulShard хЬ░хЭА: ${CONTRACTS.SoulShard}`);
            const tx = await dungeonCore.setSoulShardAddress(CONTRACTS.SoulShard, { gasLimit: 200000 });
            transactions.push({ name: "DungeonCore.setSoulShardAddress", hash: tx.hash });
            txCount++;
            await tx.wait();
            console.log("тЬЕ SoulShard хЬ░хЭАшинхоЪхоМцИР");
        } catch (e) {
            console.log("тЭМ шинхоЪ SoulShard хЬ░хЭАхд▒цХЧ:", e.message);
        }
        
    } catch (error) {
        console.log("тЭМ DungeonCore шинхоЪхд▒цХЧ:", error.message);
    }
    
    // ===========================================
    // 2. шинхоЪхРДхРИч┤ДчЪД DungeonCore хЬ░хЭА
    // ===========================================
    console.log("\nЁЯФД шинхоЪхРДхРИч┤ДчЪД DungeonCore хЬ░хЭА...");
    console.log("-".repeat(60));
    
    const coreSetterABI = [
        "function setDungeonCoreAddress(address)"
    ];
    
    const contractsToSetCore = [
        "Hero", "Relic", "Party", "DungeonMaster", 
        "PlayerVault", "PlayerProfile", "VIPStaking"
    ];
    
    for (const contractName of contractsToSetCore) {
        try {
            const contract = new hre.ethers.Contract(CONTRACTS[contractName], coreSetterABI, signer);
            console.log(`шинхоЪ ${contractName} чЪД DungeonCore хЬ░хЭА`);
            const tx = await contract.setDungeonCoreAddress(CONTRACTS.DungeonCore, { gasLimit: 200000 });
            transactions.push({ name: `${contractName}.setDungeonCoreAddress`, hash: tx.hash });
            txCount++;
            await tx.wait();
            console.log(`тЬЕ ${contractName} DungeonCore хЬ░хЭАшинхоЪхоМцИР`);
        } catch (e) {
            console.log(`тЭМ ${contractName} DungeonCore хЬ░хЭАшинхоЪхд▒цХЧ:`, e.message);
        }
    }
    
    // ===========================================
    // 3. шинхоЪ DungeonMaster чЪД DungeonStorage хЬ░хЭА
    // ===========================================
    console.log("\nЁЯЧДя╕П шинхоЪ DungeonMaster чЪД DungeonStorage хЬ░хЭА...");
    console.log("-".repeat(60));
    
    const dmStorageABI = [
        "function setDungeonStorageAddress(address)"
    ];
    
    try {
        const dungeonMaster = new hre.ethers.Contract(CONTRACTS.DungeonMaster, dmStorageABI, signer);
        console.log(`шинхоЪ DungeonStorage хЬ░хЭА: ${CONTRACTS.DungeonStorage}`);
        const tx = await dungeonMaster.setDungeonStorageAddress(CONTRACTS.DungeonStorage, { gasLimit: 200000 });
        transactions.push({ name: "DungeonMaster.setDungeonStorageAddress", hash: tx.hash });
        txCount++;
        await tx.wait();
        console.log("тЬЕ DungeonStorage хЬ░хЭАшинхоЪхоМцИР");
    } catch (e) {
        console.log("тЭМ DungeonStorage хЬ░хЭАшинхоЪхд▒цХЧ:", e.message);
    }
    
    // ===========================================
    // 4. шинхоЪ Oracle чЪД Token хЬ░хЭА
    // ===========================================
    console.log("\nЁЯТ░ шинхоЪ Oracle чЪД Token хЬ░хЭА...");
    console.log("-".repeat(60));
    
    const oracleABI = [
        "function setSoulShardAddress(address)",
        "function setUsdAddress(address)"
    ];
    
    try {
        const oracle = new hre.ethers.Contract(CONTRACTS.Oracle, oracleABI, signer);
        
        // шинхоЪ SoulShard хЬ░хЭА
        try {
            console.log(`шинхоЪ Oracle SoulShard хЬ░хЭА: ${CONTRACTS.SoulShard}`);
            const tx = await oracle.setSoulShardAddress(CONTRACTS.SoulShard, { gasLimit: 200000 });
            transactions.push({ name: "Oracle.setSoulShardAddress", hash: tx.hash });
            txCount++;
            await tx.wait();
            console.log("тЬЕ Oracle SoulShard хЬ░хЭАшинхоЪхоМцИР");
        } catch (e) {
            console.log("тЭМ Oracle SoulShard хЬ░хЭАшинхоЪхд▒цХЧ:", e.message);
        }
        
        // шинхоЪ USD хЬ░хЭА
        try {
            console.log(`шинхоЪ Oracle USD хЬ░хЭА: ${CONTRACTS.USD}`);
            const tx = await oracle.setUsdAddress(CONTRACTS.USD, { gasLimit: 200000 });
            transactions.push({ name: "Oracle.setUsdAddress", hash: tx.hash });
            txCount++;
            await tx.wait();
            console.log("тЬЕ Oracle USD хЬ░хЭАшинхоЪхоМцИР");
        } catch (e) {
            console.log("тЭМ Oracle USD хЬ░хЭАшинхоЪхд▒цХЧ:", e.message);
        }
    } catch (error) {
        console.log("тЭМ Oracle хРИч┤ДщАгцОехд▒цХЧ:", error.message);
    }
    
    // ===========================================
    // 5. цОИцмК VRF Manager
    // ===========================================
    console.log("\nЁЯУб цОИцмК VRF Manager...");
    console.log("-".repeat(60));
    
    const vrfManagerABI = [
        "function authorize(address)"
    ];
    
    try {
        const vrfManager = new hre.ethers.Contract(CONTRACTS.VRFManager, vrfManagerABI, signer);
        
        const vrfClients = ["DungeonMaster", "Hero", "Relic", "AltarOfAscension"];
        for (const clientName of vrfClients) {
            try {
                console.log(`цОИцмК ${clientName} ф╜┐чФи VRF`);
                const tx = await vrfManager.authorize(CONTRACTS[clientName], { gasLimit: 200000 });
                transactions.push({ name: `VRFManager.authorize(${clientName})`, hash: tx.hash });
                txCount++;
                await tx.wait();
                console.log(`тЬЕ ${clientName} VRF цОИцмКхоМцИР`);
            } catch (e) {
                console.log(`тЭМ ${clientName} VRF цОИцмКхд▒цХЧ:`, e.message);
            }
        }
    } catch (error) {
        console.log("тЭМ VRF Manager щАгцОехд▒цХЧ:", error.message);
    }
    
    // ===========================================
    // ч╕╜ч╡Р
    // ===========================================
    console.log("\n" + "=".repeat(60));
    console.log("ЁЯУК ф┐ох╛йч╡РцЮЬч╕╜ч╡Р");
    console.log("=".repeat(60));
    
    console.log(`\nхЯ╖шбМф║Ж ${txCount} хАЛф║дцШУ:`);
    transactions.forEach((tx, index) => {
        console.log(`${index + 1}. ${tx.name}`);
        console.log(`   Hash: ${tx.hash}`);
    });
    
    if (txCount > 0) {
        console.log("\nтЬЕ хРИч┤Дф║ТщАгф┐ох╛йхоМцИРя╝Б");
        console.log("х╗║шн░щБЛшбМ check-all-connections.js щйЧшнЙч╡РцЮЬ");
    } else {
        console.log("\nтЬЕ цЙАцЬЙщАгцОещГ╜х╖▓цнгчв║я╝МчДбщЬАф┐ох╛йя╝Б");
    }
}

main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error("тЭМ шЕ│цЬмхЯ╖шбМхд▒цХЧ:", error);
        process.exit(1);
    });