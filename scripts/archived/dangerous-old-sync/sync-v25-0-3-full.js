const fs = require('fs');
const path = require('path');

/**
 * V25.0.3 ÂÆåÊï¥ÈÖçÁΩÆÂêåÊ≠•ËÖ≥Êú¨
 * 
 * Ëá™ÂãïÂêåÊ≠•ÊâÄÊúâÂêàÁ¥ÑÈÖçÁΩÆÂà∞Ôºö
 * - ÂâçÁ´ØÈ†ÖÁõÆ (DungeonDelvers)
 * - ÂæåÁ´ØÈ†ÖÁõÆ (dungeon-delvers-metadata-server)
 * - Â≠êÂúñÈ†ÖÁõÆ (DDgraphql/dungeon-delvers)
 */

// È°èËâ≤Ëº∏Âá∫
const colors = {
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  red: '\x1b[31m',
  cyan: '\x1b[36m',
  magenta: '\x1b[35m',
  reset: '\x1b[0m'
};

async function syncConfiguration() {
  console.log(`${colors.cyan}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${colors.reset}`);
  console.log(`${colors.cyan}‚ïë              V25.0.3 ÈÖçÁΩÆÂêåÊ≠• - ÂÖ®Èù¢Êõ¥Êñ∞ÊâÄÊúâÈ†ÖÁõÆ                     ‚ïë${colors.reset}`);
  console.log(`${colors.cyan}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${colors.reset}`);
  console.log('=' . repeat(70));

  // ËÆÄÂèñÈÉ®ÁΩ≤ÈÖçÁΩÆ
  const envPath = path.join(__dirname, '..', '.env.v25.0.3');
  if (!fs.existsSync(envPath)) {
    console.error(`${colors.red}‚ùå ÈåØË™§: .env.v25.0.3 Êú™ÊâæÂà∞„ÄÇË´ãÂÖàÂü∑Ë°åÈÉ®ÁΩ≤ËÖ≥Êú¨„ÄÇ${colors.reset}`);
    process.exit(1);
  }

  console.log(`üìñ ËÆÄÂèñÈÖçÁΩÆÂæû: .env.v25.0.3`);
  
  // Ëß£ÊûêÈÖçÁΩÆ
  const envContent = fs.readFileSync(envPath, 'utf8');
  const config = {};
  envContent.split('\n').forEach(line => {
    if (line && !line.startsWith('#') && line.includes('=')) {
      const [key, value] = line.split('=');
      config[key.trim()] = value.trim();
    }
  });

  // È†ÖÁõÆË∑ØÂæë
  const FRONTEND_PATH = '/Users/sotadic/Documents/GitHub/DungeonDelvers';
  const FRONTEND_SOULBOUND_PATH = '/Users/sotadic/Documents/GitHub/SoulboundSaga'; // Êñ∞ÂâçÁ´ØÈ†ÖÁõÆ
  const BACKEND_PATH = '/Users/sotadic/Documents/dungeon-delvers-metadata-server';
  const SUBGRAPH_PATH = '/Users/sotadic/Documents/GitHub/DungeonDelvers/DDgraphql/dungeon-delvers';

  console.log('\n' + '=' . repeat(70));
  console.log(`${colors.magenta}1. ÂêåÊ≠•Âà∞ÂâçÁ´ØÈ†ÖÁõÆ${colors.reset}`);
  console.log('=' . repeat(70));

  // Êõ¥Êñ∞ÂÖ©ÂÄãÂâçÁ´ØÈ†ÖÁõÆ
  const frontendPaths = [
    { name: 'DungeonDelvers', path: FRONTEND_PATH },
    { name: 'SoulboundSaga', path: FRONTEND_SOULBOUND_PATH }
  ];

  for (const frontend of frontendPaths) {
    if (!fs.existsSync(frontend.path)) {
      console.log(`${colors.yellow}‚ö†Ô∏è  Ë∑≥ÈÅé ${frontend.name}ÔºöÁõÆÈåÑ‰∏çÂ≠òÂú®${colors.reset}`);
      continue;
    }

    console.log(`\nüìÅ Êõ¥Êñ∞ ${frontend.name}...`);

    // Êõ¥Êñ∞ .env.local
    const frontendEnvPath = path.join(frontend.path, '.env.local');
    const frontendEnvContent = `# V25.0.3 Frontend Configuration
# Auto-generated from deployment
# Updated: ${new Date().toISOString()}

# ==================== Contract Addresses ====================
${Object.entries(config)
  .filter(([key]) => key.startsWith('VITE_'))
  .map(([key, value]) => `${key}=${value}`)
  .join('\n')}

# ==================== Additional Frontend Config ====================
# Add any frontend-specific configurations below
`;

    fs.writeFileSync(frontendEnvPath, frontendEnvContent);
    console.log(`  ${colors.green}‚úÖ Êõ¥Êñ∞: ${frontendEnvPath}${colors.reset}`);

    // Êõ¥Êñ∞ public/config/latest.json
    const frontendConfigJson = {
      version: 'V25.0.3',
      network: 'BSC Mainnet',
      chainId: 56,
      startBlock: 58266666,
      deploymentDate: config.VITE_DEPLOYMENT_DATE,
      contracts: {
        // ‰ª£Âπ£
        soulShard: config.VITE_SOULSHARD_ADDRESS,
        usd: config.VITE_USD_ADDRESS,
        
        // Ê†∏ÂøÉ
        dungeonCore: config.VITE_DUNGEONCORE_ADDRESS,
        oracle: config.VITE_ORACLE_ADDRESS,
        vrfManager: config.VITE_VRF_MANAGER_V2PLUS_ADDRESS,
        
        // NFT
        hero: config.VITE_HERO_ADDRESS,
        relic: config.VITE_RELIC_ADDRESS,
        party: config.VITE_PARTY_ADDRESS,
        
        // ÈÅäÊà≤ÈÇèËºØ
        dungeonMaster: config.VITE_DUNGEONMASTER_ADDRESS,
        dungeonStorage: config.VITE_DUNGEONSTORAGE_ADDRESS,
        altarOfAscension: config.VITE_ALTAROFASCENSION_ADDRESS,
        playerVault: config.VITE_PLAYERVAULT_ADDRESS,
        playerProfile: config.VITE_PLAYERPROFILE_ADDRESS,
        vipStaking: config.VITE_VIPSTAKING_ADDRESS
      },
      vrf: {
        coordinator: config.VITE_VRF_COORDINATOR,
        keyHash: config.VITE_VRF_KEY_HASH,
        subscriptionId: config.VITE_VRF_SUBSCRIPTION_ID,
        callbackGasLimit: parseInt(config.VITE_VRF_CALLBACK_GAS_LIMIT || '2500000')
      },
      subgraph: {
        studio: config.VITE_SUBGRAPH_STUDIO_URL,
        decentralized: config.VITE_SUBGRAPH_DECENTRALIZED_URL
      },
      backend: config.VITE_BACKEND_URL,
      adminWallet: config.VITE_ADMIN_WALLET
    };

    const frontendConfigPath = path.join(frontend.path, 'public', 'config', 'latest.json');
    fs.mkdirSync(path.dirname(frontendConfigPath), { recursive: true });
    fs.writeFileSync(frontendConfigPath, JSON.stringify(frontendConfigJson, null, 2));
    console.log(`  ${colors.green}‚úÖ Êõ¥Êñ∞: ${frontendConfigPath}${colors.reset}`);
  }

  console.log('\n' + '=' . repeat(70));
  console.log(`${colors.magenta}2. ÂêåÊ≠•Âà∞ÂæåÁ´ØÈ†ÖÁõÆ${colors.reset}`);
  console.log('=' . repeat(70));

  // Êõ¥Êñ∞ÂæåÁ´ØÈÖçÁΩÆ
  const backendConfigPath = path.join(BACKEND_PATH, 'config', 'contracts.json');
  const backendConfig = {
    version: 'V25.0.3',
    network: 'BSC Mainnet',
    chainId: 56,
    updatedAt: new Date().toISOString(),
    contracts: {
      // ‰ª£Âπ£
      soulShard: config.VITE_SOULSHARD_ADDRESS,
      usd: config.VITE_USD_ADDRESS,
      
      // Ê†∏ÂøÉ
      dungeonCore: config.VITE_DUNGEONCORE_ADDRESS,
      oracle: config.VITE_ORACLE_ADDRESS,
      vrfManager: config.VITE_VRF_MANAGER_V2PLUS_ADDRESS,
      
      // NFT
      hero: config.VITE_HERO_ADDRESS,
      relic: config.VITE_RELIC_ADDRESS,
      party: config.VITE_PARTY_ADDRESS,
      
      // ÈÅäÊà≤ÈÇèËºØ
      dungeonMaster: config.VITE_DUNGEONMASTER_ADDRESS,
      dungeonStorage: config.VITE_DUNGEONSTORAGE_ADDRESS,
      altarOfAscension: config.VITE_ALTAROFASCENSION_ADDRESS,
      playerVault: config.VITE_PLAYERVAULT_ADDRESS,
      playerProfile: config.VITE_PLAYERPROFILE_ADDRESS,
      vipStaking: config.VITE_VIPSTAKING_ADDRESS
    },
    vrf: {
      coordinator: config.VITE_VRF_COORDINATOR,
      keyHash: config.VITE_VRF_KEY_HASH,
      subscriptionId: config.VITE_VRF_SUBSCRIPTION_ID
    },
    subgraph: {
      studio: config.VITE_SUBGRAPH_STUDIO_URL,
      decentralized: config.VITE_SUBGRAPH_DECENTRALIZED_URL,
      version: 'v3.9.4'
    },
    deployment: {
      startBlock: 58266666,
      deploymentDate: config.VITE_DEPLOYMENT_DATE,
      adminWallet: config.VITE_ADMIN_WALLET
    }
  };

  fs.mkdirSync(path.dirname(backendConfigPath), { recursive: true });
  fs.writeFileSync(backendConfigPath, JSON.stringify(backendConfig, null, 2));
  console.log(`${colors.green}‚úÖ Êõ¥Êñ∞: ${backendConfigPath}${colors.reset}`);

  console.log('\n' + '=' . repeat(70));
  console.log(`${colors.magenta}3. Ê∫ñÂÇôÂ≠êÂúñ${colors.reset}`);
  console.log('=' . repeat(70));

  // Êõ¥Êñ∞Â≠êÂúñ networks.json
  const subgraphNetworksPath = path.join(SUBGRAPH_PATH, 'networks.json');
  const subgraphNetworks = {
    "bsc": {
      "Hero": {
        "address": config.VITE_HERO_ADDRESS,
        "startBlock": 58266666
      },
      "Relic": {
        "address": config.VITE_RELIC_ADDRESS,
        "startBlock": 58266666
      },
      "Party": {
        "address": config.VITE_PARTY_ADDRESS,
        "startBlock": 58266666
      },
      "DungeonMaster": {
        "address": config.VITE_DUNGEONMASTER_ADDRESS,
        "startBlock": 58266666
      },
      "DungeonStorage": {
        "address": config.VITE_DUNGEONSTORAGE_ADDRESS,
        "startBlock": 58266666
      },
      "AltarOfAscension": {
        "address": config.VITE_ALTAROFASCENSION_ADDRESS,
        "startBlock": 58266666
      },
      "PlayerVault": {
        "address": config.VITE_PLAYERVAULT_ADDRESS,
        "startBlock": 58266666
      },
      "PlayerProfile": {
        "address": config.VITE_PLAYERPROFILE_ADDRESS,
        "startBlock": 58266666
      },
      "VIPStaking": {
        "address": config.VITE_VIPSTAKING_ADDRESS,
        "startBlock": 58266666
      },
      "DungeonCore": {
        "address": config.VITE_DUNGEONCORE_ADDRESS,
        "startBlock": 58266666
      },
      "Oracle": {
        "address": config.VITE_ORACLE_ADDRESS,
        "startBlock": 58266666
      },
      "VRFConsumerV2Plus": {
        "address": config.VITE_VRF_MANAGER_V2PLUS_ADDRESS,
        "startBlock": 58266666
      }
    }
  };

  fs.writeFileSync(subgraphNetworksPath, JSON.stringify(subgraphNetworks, null, 2));
  console.log(`${colors.green}‚úÖ Êõ¥Êñ∞: ${subgraphNetworksPath}${colors.reset}`);

  // Ë§áË£Ω ABI Êñá‰ª∂Âà∞Â≠êÂúñ
  console.log('\nüìã Ë§áË£Ω ABI Êñá‰ª∂Âà∞Â≠êÂúñ...');
  const allContracts = [
    'Hero', 'Relic', 'Party', 
    'DungeonMaster', 'DungeonStorage', 'AltarOfAscension',
    'PlayerVault', 'PlayerProfile', 'VIPStaking',
    'DungeonCore', 'Oracle', 'VRFConsumerV2Plus'
  ];
  
  const contractsPath = path.join(__dirname, '..', 'artifacts', 'contracts', 'current');
  const subgraphAbiPath = path.join(SUBGRAPH_PATH, 'abis');

  fs.mkdirSync(subgraphAbiPath, { recursive: true });

  for (const contractName of allContracts) {
    try {
      // ÂòóË©¶‰∏çÂêåÁöÑÁõÆÈåÑÁµêÊßã
      const possiblePaths = [
        path.join(contractsPath, 'nft', `${contractName}.sol`, `${contractName}.json`),
        path.join(contractsPath, 'game', `${contractName}.sol`, `${contractName}.json`),
        path.join(contractsPath, 'altar', `${contractName}.sol`, `${contractName}.json`),
        path.join(contractsPath, 'defi', `${contractName}.sol`, `${contractName}.json`),
        path.join(contractsPath, 'core', `${contractName}.sol`, `${contractName}.json`),
        path.join(contractsPath, 'vrf', `${contractName}.sol`, `${contractName}.json`),
        path.join(contractsPath, `${contractName}.sol`, `${contractName}.json`)
      ];
      
      let found = false;
      for (const artifactPath of possiblePaths) {
        if (fs.existsSync(artifactPath)) {
          const artifact = JSON.parse(fs.readFileSync(artifactPath, 'utf8'));
          const abiOnly = { abi: artifact.abi };
          const destPath = path.join(subgraphAbiPath, `${contractName}.json`);
          fs.writeFileSync(destPath, JSON.stringify(abiOnly, null, 2));
          console.log(`  ${colors.green}‚úÖ Ë§áË£Ω ${contractName}.json${colors.reset}`);
          found = true;
          break;
        }
      }
      
      if (!found) {
        console.log(`  ${colors.yellow}‚ö†Ô∏è  Ë≠¶Âëä: ${contractName}.json Êú™ÊâæÂà∞${colors.reset}`);
      }
    } catch (error) {
      console.log(`  ${colors.red}‚ùå ÈåØË™§Ë§áË£Ω ${contractName}.json: ${error.message}${colors.reset}`);
    }
  }

  // Ë§áË£Ω ABI Âà∞ÂâçÁ´ØÈ†ÖÁõÆ
  console.log('\nüìã Ë§áË£Ω ABI Êñá‰ª∂Âà∞ÂâçÁ´Ø...');
  for (const frontend of frontendPaths) {
    if (!fs.existsSync(frontend.path)) continue;
    
    const frontendAbiPath = path.join(frontend.path, 'src', 'contracts', 'abi');
    fs.mkdirSync(frontendAbiPath, { recursive: true });
    
    console.log(`\n  Êõ¥Êñ∞ ${frontend.name} ABI...`);
    for (const contractName of allContracts) {
      const sourceAbi = path.join(subgraphAbiPath, `${contractName}.json`);
      if (fs.existsSync(sourceAbi)) {
        const destAbi = path.join(frontendAbiPath, `${contractName}.json`);
        fs.copyFileSync(sourceAbi, destAbi);
        console.log(`    ‚úÖ ${contractName}.json`);
      }
    }
  }

  // È°ØÁ§∫Â≠êÂúñÈÖçÁΩÆÊõ¥Êñ∞ÊèêÁ§∫
  console.log('\n' + '=' . repeat(70));
  console.log(`${colors.magenta}4. Â≠êÂúñÁ∑®Ë≠ØÊåá‰ª§${colors.reset}`);
  console.log('=' . repeat(70));
  
  console.log(`\n${colors.cyan}Á∑®Ë≠ØÂ≠êÂúñ:${colors.reset}`);
  console.log(`  cd ${SUBGRAPH_PATH}`);
  console.log(`  npm run codegen`);
  console.log(`  npm run build`);
  console.log(`\n${colors.yellow}Ê≥®ÊÑè: Â≠êÂúñÈÉ®ÁΩ≤Â∞áÁî±ÊÇ®ÊâãÂãïÂÆåÊàê${colors.reset}`);

  // ÂÆåÊàêÁ∏ΩÁµê
  console.log('\n' + '=' . repeat(70));
  console.log(`${colors.green}üéâ ÂêåÊ≠•ÂÆåÊàêÔºÅ${colors.reset}`);
  console.log('=' . repeat(70));
  
  console.log('\nüìä ÂêåÊ≠•Á∏ΩÁµê:');
  console.log(`  ${colors.green}‚úÖ${colors.reset} ÂâçÁ´ØÈÖçÁΩÆÂ∑≤Êõ¥Êñ∞ (DungeonDelvers & SoulboundSaga)`);
  console.log(`  ${colors.green}‚úÖ${colors.reset} ÂæåÁ´ØÈÖçÁΩÆÂ∑≤Êõ¥Êñ∞`);
  console.log(`  ${colors.green}‚úÖ${colors.reset} Â≠êÂúñ networks.json Â∑≤Êõ¥Êñ∞`);
  console.log(`  ${colors.green}‚úÖ${colors.reset} ABI Êñá‰ª∂Â∑≤Ë§áË£ΩÂà∞ÊâÄÊúâÈ†ÖÁõÆ`);
  
  console.log('\n‚è≠Ô∏è ‰∏ã‰∏ÄÊ≠•Êìç‰Ωú:');
  console.log('1. ÈáçÂïüÂâçÁ´ØÈñãÁôºÊúçÂãôÂô®');
  console.log('2. ÈáçÂïüÂæåÁ´ØÊúçÂãôÂô®');
  console.log('3. Á∑®Ë≠ØÂ≠êÂúñ (npm run codegen && npm run build)');
  console.log('4. ÊâãÂãïÈÉ®ÁΩ≤Â≠êÂúñÂà∞ v3.9.4');
  console.log('5. Ê∏¨Ë©¶ÊâÄÊúâÂäüËÉΩ');
  
  console.log('\n' + '=' . repeat(70));
}

// Âü∑Ë°åÂêåÊ≠•
syncConfiguration().catch(error => {
  console.error(`${colors.red}‚ùå ÂêåÊ≠•Â§±Êïó:${colors.reset}`, error);
  process.exit(1);
});