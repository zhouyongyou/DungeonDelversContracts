// VRF ÈëÑÈÄ†Ë™øË©¶ËÖ≥Êú¨
const hre = require("hardhat");
const { ethers } = require("hardhat");

// ÂêàÁ¥ÑÂú∞ÂùÄ
const ADDRESSES = {
    VRFConsumer: "0xE1D1c53e2e467BFF3d6e4EffB7b89C0C10711ad1", // VRFConsumerV2Plus
    Hero: "0x5eded2670a6e7eb4a9c581bc397edc3b48cafd6d",
    Relic: "0x7a9469587ffd28a69d4420d8893e7a0e92ef6316",
    DungeonMaster: "0xE391261741Fad5FCC2D298d00e8c684767021253",
    AltarOfAscension: "0x3de7c97e6b65be8a1d726f5261cda1dd7d1e0cf1",
    SoulShard: "0x97B2C2a9A11C7b6A020b4bAEaAd349865eaD0bcF"
};

async function main() {
    console.log("=== VRF ÈëÑÈÄ†Ë™øË©¶ÈñãÂßã ===\n");
    
    const [signer] = await ethers.getSigners();
    console.log("Âü∑Ë°åÂú∞ÂùÄ:", signer.address);
    
    // ËºâÂÖ•ÂêàÁ¥Ñ
    const vrfConsumer = await ethers.getContractAt(
        "VRFConsumerV2Plus",
        ADDRESSES.VRFConsumer
    );
    
    const hero = await ethers.getContractAt(
        "Hero",
        ADDRESSES.Hero
    );
    
    const soulShard = await ethers.getContractAt(
        "IERC20",
        ADDRESSES.SoulShard
    );
    
    console.log("\n=== Ê≠•È©ü 1: Ê™¢Êü• VRF Ë®≠ÁΩÆ ===");
    
    // 1. Ê™¢Êü•Ë®ÇÈñ± ID
    const subscriptionId = await vrfConsumer.s_subscriptionId();
    console.log("‚úÖ Ë®ÇÈñ± ID:", subscriptionId.toString());
    
    // 2. Ê™¢Êü• VRF ÂèÉÊï∏
    const keyHash = await vrfConsumer.keyHash();
    const callbackGasLimit = await vrfConsumer.callbackGasLimit();
    console.log("‚úÖ Key Hash:", keyHash);
    console.log("‚úÖ Callback Gas Limit:", callbackGasLimit.toString());
    
    console.log("\n=== Ê≠•È©ü 2: Ê™¢Êü•ÊéàÊ¨äÁãÄÊÖã ===");
    
    // 3. Ê™¢Êü• Hero ÊòØÂê¶Ë¢´ÊéàÊ¨ä
    const heroAuthorized = await vrfConsumer.authorized(ADDRESSES.Hero);
    console.log(`Hero ÊéàÊ¨äÁãÄÊÖã: ${heroAuthorized ? "‚úÖ Â∑≤ÊéàÊ¨ä" : "‚ùå Êú™ÊéàÊ¨ä"}`);
    
    if (!heroAuthorized) {
        console.log("üîß ÈúÄË¶ÅÂü∑Ë°å: vrfConsumer.setAuthorizedContract(HeroÂú∞ÂùÄ, true)");
    }
    
    // 4. Ê™¢Êü• Hero ÁöÑ VRF Manager Ë®≠ÁΩÆ
    const vrfManager = await hero.vrfManager();
    const isVRFSet = vrfManager.toLowerCase() === ADDRESSES.VRFConsumer.toLowerCase();
    console.log(`Hero VRF Manager: ${isVRFSet ? "‚úÖ Â∑≤Ë®≠ÁΩÆ" : "‚ùå Êú™Ë®≠ÁΩÆ"}`);
    console.log(`  Áï∂ÂâçÂÄº: ${vrfManager}`);
    console.log(`  ÊáâË©≤ÊòØ: ${ADDRESSES.VRFConsumer}`);
    
    if (!isVRFSet) {
        console.log("üîß ÈúÄË¶ÅÂü∑Ë°å: hero.setVRFManager(VRFConsumerÂú∞ÂùÄ)");
    }
    
    console.log("\n=== Ê≠•È©ü 3: Ê™¢Êü•ÈëÑÈÄ†ÂâçÁΩÆÊ¢ù‰ª∂ ===");
    
    // 5. Ê™¢Êü• SoulShard È§òÈ°ç
    const balance = await soulShard.balanceOf(signer.address);
    const requiredAmount = await hero.getRequiredSoulShardAmount(1);
    console.log(`SoulShard È§òÈ°ç: ${ethers.formatEther(balance)} SOUL`);
    console.log(`ÈëÑÈÄ† 1 ÂÄãÈúÄË¶Å: ${ethers.formatEther(requiredAmount)} SOUL`);
    console.log(`È§òÈ°çÊ™¢Êü•: ${balance >= requiredAmount ? "‚úÖ Ë∂≥Â§†" : "‚ùå ‰∏çË∂≥"}`);
    
    // 6. Ê™¢Êü•ÊéàÊ¨äÈ°çÂ∫¶
    const allowance = await soulShard.allowance(signer.address, ADDRESSES.Hero);
    console.log(`ÊéàÊ¨äÈ°çÂ∫¶: ${ethers.formatEther(allowance)} SOUL`);
    console.log(`ÊéàÊ¨äÊ™¢Êü•: ${allowance >= requiredAmount ? "‚úÖ Ë∂≥Â§†" : "‚ùå ‰∏çË∂≥"}`);
    
    if (allowance < requiredAmount) {
        console.log("üîß ÈúÄË¶ÅÂü∑Ë°å: soulShard.approve(HeroÂú∞ÂùÄ, amount)");
    }
    
    // 7. Ê™¢Êü•Âπ≥Âè∞Ë≤ª
    const platformFee = await hero.platformFee();
    console.log(`Âπ≥Âè∞Ë≤ª: ${ethers.formatEther(platformFee)} BNB`);
    
    // 8. Ê™¢Êü•ÊòØÂê¶ÊúâÊú™ÂÆåÊàêÁöÑÈëÑÈÄ†
    const commitment = await hero.userCommitments(signer.address);
    if (commitment.blockNumber > 0 && !commitment.fulfilled) {
        console.log("\n‚ö†Ô∏è  ÊúâÊú™ÂÆåÊàêÁöÑÈëÑÈÄ†ÔºÅ");
        console.log(`  ÂçÄÂ°äÈ´òÂ∫¶: ${commitment.blockNumber}`);
        console.log(`  Êï∏Èáè: ${commitment.quantity}`);
        console.log("  ÈúÄË¶ÅÂÖàË™øÁî® revealMint() ÂÆåÊàê‰πãÂâçÁöÑÈëÑÈÄ†");
    } else {
        console.log("‚úÖ Ê≤íÊúâÊú™ÂÆåÊàêÁöÑÈëÑÈÄ†");
    }
    
    console.log("\n=== Ê≠•È©ü 4: Ê∏¨Ë©¶Á∞°ÂñÆ VRF Ë´ãÊ±Ç ===");
    
    try {
        console.log("Ê∏¨Ë©¶Áõ¥Êé•Ë™øÁî® VRF...");
        const testTx = await vrfConsumer.requestRandomWords(true, {
            gasLimit: 500000
        });
        console.log("‚úÖ VRF Ë´ãÊ±ÇÊàêÂäüÔºÅ‰∫§ÊòìÂìàÂ∏å:", testTx.hash);
        
        const receipt = await testTx.wait();
        const requestEvent = receipt.logs.find(log => {
            try {
                const parsed = vrfConsumer.interface.parseLog(log);
                return parsed.name === "RequestSent";
            } catch {
                return false;
            }
        });
        
        if (requestEvent) {
            const parsed = vrfConsumer.interface.parseLog(requestEvent);
            console.log("‚úÖ Request ID:", parsed.args.requestId.toString());
        }
    } catch (error) {
        console.log("‚ùå VRF Ë´ãÊ±ÇÂ§±Êïó:", error.message);
    }
    
    console.log("\n=== Ë®∫Êñ∑Á∏ΩÁµê ===");
    
    const allChecks = [
        heroAuthorized,
        isVRFSet,
        balance >= requiredAmount,
        allowance >= requiredAmount,
        !commitment.blockNumber || commitment.fulfilled
    ];
    
    if (allChecks.every(check => check)) {
        console.log("‚úÖ ÊâÄÊúâÊ™¢Êü•ÈÄöÈÅéÔºÅÂèØ‰ª•ÂòóË©¶ÈëÑÈÄ†");
        console.log("\n‰∏ã‰∏ÄÊ≠•Ôºö");
        console.log("1. Ë™øÁî® hero.mintFromWallet(1, {value: platformFee})");
        console.log("2. Á≠âÂæÖ‰∫§ÊòìÁ¢∫Ë™ç");
        console.log("3. Ë™øÁî® hero.revealMint() Êè≠Á§∫ NFT");
    } else {
        console.log("‚ùå Êúâ‰∫õË®≠ÁΩÆÈúÄË¶Å‰øÆÊ≠£ÔºåË´ãÊåâÁÖß‰∏äÈù¢ÁöÑÊèêÁ§∫Êìç‰Ωú");
    }
}

main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error(error);
        process.exit(1);
    });