// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class FeeRecipientUpdated extends ethereum.Event {
  get params(): FeeRecipientUpdated__Params {
    return new FeeRecipientUpdated__Params(this);
  }
}

export class FeeRecipientUpdated__Params {
  _event: FeeRecipientUpdated;

  constructor(event: FeeRecipientUpdated) {
    this._event = event;
  }

  get oldRecipient(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newRecipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ListingCancelled extends ethereum.Event {
  get params(): ListingCancelled__Params {
    return new ListingCancelled__Params(this);
  }
}

export class ListingCancelled__Params {
  _event: ListingCancelled;

  constructor(event: ListingCancelled) {
    this._event = event;
  }

  get listingId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get seller(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ListingCreated extends ethereum.Event {
  get params(): ListingCreated__Params {
    return new ListingCreated__Params(this);
  }
}

export class ListingCreated__Params {
  _event: ListingCreated;

  constructor(event: ListingCreated) {
    this._event = event;
  }

  get listingId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get seller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get nftType(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get nftContract(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get acceptedTokens(): Array<Address> {
    return this._event.parameters[6].value.toAddressArray();
  }
}

export class ListingPriceUpdated extends ethereum.Event {
  get params(): ListingPriceUpdated__Params {
    return new ListingPriceUpdated__Params(this);
  }
}

export class ListingPriceUpdated__Params {
  _event: ListingPriceUpdated;

  constructor(event: ListingPriceUpdated) {
    this._event = event;
  }

  get listingId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get oldPrice(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newPrice(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ListingSold extends ethereum.Event {
  get params(): ListingSold__Params {
    return new ListingSold__Params(this);
  }
}

export class ListingSold__Params {
  _event: ListingSold;

  constructor(event: ListingSold) {
    this._event = event;
  }

  get listingId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get seller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get buyer(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get paymentToken(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get price(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get platformFeeAmount(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class ListingTokensUpdated extends ethereum.Event {
  get params(): ListingTokensUpdated__Params {
    return new ListingTokensUpdated__Params(this);
  }
}

export class ListingTokensUpdated__Params {
  _event: ListingTokensUpdated;

  constructor(event: ListingTokensUpdated) {
    this._event = event;
  }

  get listingId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newAcceptedTokens(): Array<Address> {
    return this._event.parameters[1].value.toAddressArray();
  }
}

export class NFTContractApproved extends ethereum.Event {
  get params(): NFTContractApproved__Params {
    return new NFTContractApproved__Params(this);
  }
}

export class NFTContractApproved__Params {
  _event: NFTContractApproved;

  constructor(event: NFTContractApproved) {
    this._event = event;
  }

  get nftContract(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class NFTContractRevoked extends ethereum.Event {
  get params(): NFTContractRevoked__Params {
    return new NFTContractRevoked__Params(this);
  }
}

export class NFTContractRevoked__Params {
  _event: NFTContractRevoked;

  constructor(event: NFTContractRevoked) {
    this._event = event;
  }

  get nftContract(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PaymentTokenAdded extends ethereum.Event {
  get params(): PaymentTokenAdded__Params {
    return new PaymentTokenAdded__Params(this);
  }
}

export class PaymentTokenAdded__Params {
  _event: PaymentTokenAdded;

  constructor(event: PaymentTokenAdded) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PaymentTokenRemoved extends ethereum.Event {
  get params(): PaymentTokenRemoved__Params {
    return new PaymentTokenRemoved__Params(this);
  }
}

export class PaymentTokenRemoved__Params {
  _event: PaymentTokenRemoved;

  constructor(event: PaymentTokenRemoved) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PlatformFeeUpdated extends ethereum.Event {
  get params(): PlatformFeeUpdated__Params {
    return new PlatformFeeUpdated__Params(this);
  }
}

export class PlatformFeeUpdated__Params {
  _event: PlatformFeeUpdated;

  constructor(event: PlatformFeeUpdated) {
    this._event = event;
  }

  get oldFee(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newFee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class DungeonMarketplaceV2__listingsResult {
  value0: BigInt;
  value1: Address;
  value2: i32;
  value3: Address;
  value4: BigInt;
  value5: BigInt;
  value6: i32;
  value7: BigInt;
  value8: BigInt;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: i32,
    value3: Address,
    value4: BigInt,
    value5: BigInt,
    value6: i32,
    value7: BigInt,
    value8: BigInt,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2)),
    );
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set(
      "value6",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value6)),
    );
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    return map;
  }

  getId(): BigInt {
    return this.value0;
  }

  getSeller(): Address {
    return this.value1;
  }

  getNftType(): i32 {
    return this.value2;
  }

  getNftContract(): Address {
    return this.value3;
  }

  getTokenId(): BigInt {
    return this.value4;
  }

  getPrice(): BigInt {
    return this.value5;
  }

  getStatus(): i32 {
    return this.value6;
  }

  getCreatedAt(): BigInt {
    return this.value7;
  }

  getUpdatedAt(): BigInt {
    return this.value8;
  }
}

export class DungeonMarketplaceV2 extends ethereum.SmartContract {
  static bind(address: Address): DungeonMarketplaceV2 {
    return new DungeonMarketplaceV2("DungeonMarketplaceV2", address);
  }

  MAX_FEE(): BigInt {
    let result = super.call("MAX_FEE", "MAX_FEE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MAX_FEE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MAX_FEE", "MAX_FEE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approvedNFTContracts(param0: Address): boolean {
    let result = super.call(
      "approvedNFTContracts",
      "approvedNFTContracts(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBoolean();
  }

  try_approvedNFTContracts(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "approvedNFTContracts",
      "approvedNFTContracts(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  feeRecipient(): Address {
    let result = super.call("feeRecipient", "feeRecipient():(address)", []);

    return result[0].toAddress();
  }

  try_feeRecipient(): ethereum.CallResult<Address> {
    let result = super.tryCall("feeRecipient", "feeRecipient():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCurrentListingId(): BigInt {
    let result = super.call(
      "getCurrentListingId",
      "getCurrentListingId():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getCurrentListingId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentListingId",
      "getCurrentListingId():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getListingAcceptedTokens(listingId: BigInt): Array<Address> {
    let result = super.call(
      "getListingAcceptedTokens",
      "getListingAcceptedTokens(uint256):(address[])",
      [ethereum.Value.fromUnsignedBigInt(listingId)],
    );

    return result[0].toAddressArray();
  }

  try_getListingAcceptedTokens(
    listingId: BigInt,
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getListingAcceptedTokens",
      "getListingAcceptedTokens(uint256):(address[])",
      [ethereum.Value.fromUnsignedBigInt(listingId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getSupportedTokens(): Array<Address> {
    let result = super.call(
      "getSupportedTokens",
      "getSupportedTokens():(address[])",
      [],
    );

    return result[0].toAddressArray();
  }

  try_getSupportedTokens(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getSupportedTokens",
      "getSupportedTokens():(address[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getUserListings(user: Address): Array<BigInt> {
    let result = super.call(
      "getUserListings",
      "getUserListings(address):(uint256[])",
      [ethereum.Value.fromAddress(user)],
    );

    return result[0].toBigIntArray();
  }

  try_getUserListings(user: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getUserListings",
      "getUserListings(address):(uint256[])",
      [ethereum.Value.fromAddress(user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  isListingActive(listingId: BigInt): boolean {
    let result = super.call(
      "isListingActive",
      "isListingActive(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(listingId)],
    );

    return result[0].toBoolean();
  }

  try_isListingActive(listingId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isListingActive",
      "isListingActive(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(listingId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  listings(param0: BigInt): DungeonMarketplaceV2__listingsResult {
    let result = super.call(
      "listings",
      "listings(uint256):(uint256,address,uint8,address,uint256,uint256,uint8,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new DungeonMarketplaceV2__listingsResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toI32(),
      result[3].toAddress(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toI32(),
      result[7].toBigInt(),
      result[8].toBigInt(),
    );
  }

  try_listings(
    param0: BigInt,
  ): ethereum.CallResult<DungeonMarketplaceV2__listingsResult> {
    let result = super.tryCall(
      "listings",
      "listings(uint256):(uint256,address,uint8,address,uint256,uint256,uint8,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DungeonMarketplaceV2__listingsResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toI32(),
        value[3].toAddress(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toI32(),
        value[7].toBigInt(),
        value[8].toBigInt(),
      ),
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  platformFee(): BigInt {
    let result = super.call("platformFee", "platformFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_platformFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("platformFee", "platformFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportedTokens(param0: Address): boolean {
    let result = super.call(
      "supportedTokens",
      "supportedTokens(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBoolean();
  }

  try_supportedTokens(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportedTokens",
      "supportedTokens(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  tokenList(param0: BigInt): Address {
    let result = super.call("tokenList", "tokenList(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return result[0].toAddress();
  }

  try_tokenList(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("tokenList", "tokenList(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  userListings(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "userListings",
      "userListings(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );

    return result[0].toBigInt();
  }

  try_userListings(
    param0: Address,
    param1: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userListings",
      "userListings(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _feeRecipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _supportedTokens(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get _nftContracts(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddPaymentTokenCall extends ethereum.Call {
  get inputs(): AddPaymentTokenCall__Inputs {
    return new AddPaymentTokenCall__Inputs(this);
  }

  get outputs(): AddPaymentTokenCall__Outputs {
    return new AddPaymentTokenCall__Outputs(this);
  }
}

export class AddPaymentTokenCall__Inputs {
  _call: AddPaymentTokenCall;

  constructor(call: AddPaymentTokenCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddPaymentTokenCall__Outputs {
  _call: AddPaymentTokenCall;

  constructor(call: AddPaymentTokenCall) {
    this._call = call;
  }
}

export class ApproveNFTContractCall extends ethereum.Call {
  get inputs(): ApproveNFTContractCall__Inputs {
    return new ApproveNFTContractCall__Inputs(this);
  }

  get outputs(): ApproveNFTContractCall__Outputs {
    return new ApproveNFTContractCall__Outputs(this);
  }
}

export class ApproveNFTContractCall__Inputs {
  _call: ApproveNFTContractCall;

  constructor(call: ApproveNFTContractCall) {
    this._call = call;
  }

  get nftContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ApproveNFTContractCall__Outputs {
  _call: ApproveNFTContractCall;

  constructor(call: ApproveNFTContractCall) {
    this._call = call;
  }
}

export class CancelListingCall extends ethereum.Call {
  get inputs(): CancelListingCall__Inputs {
    return new CancelListingCall__Inputs(this);
  }

  get outputs(): CancelListingCall__Outputs {
    return new CancelListingCall__Outputs(this);
  }
}

export class CancelListingCall__Inputs {
  _call: CancelListingCall;

  constructor(call: CancelListingCall) {
    this._call = call;
  }

  get listingId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelListingCall__Outputs {
  _call: CancelListingCall;

  constructor(call: CancelListingCall) {
    this._call = call;
  }
}

export class CreateListingCall extends ethereum.Call {
  get inputs(): CreateListingCall__Inputs {
    return new CreateListingCall__Inputs(this);
  }

  get outputs(): CreateListingCall__Outputs {
    return new CreateListingCall__Outputs(this);
  }
}

export class CreateListingCall__Inputs {
  _call: CreateListingCall;

  constructor(call: CreateListingCall) {
    this._call = call;
  }

  get nftType(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get nftContract(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get price(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get acceptedTokens(): Array<Address> {
    return this._call.inputValues[4].value.toAddressArray();
  }
}

export class CreateListingCall__Outputs {
  _call: CreateListingCall;

  constructor(call: CreateListingCall) {
    this._call = call;
  }
}

export class PurchaseNFTCall extends ethereum.Call {
  get inputs(): PurchaseNFTCall__Inputs {
    return new PurchaseNFTCall__Inputs(this);
  }

  get outputs(): PurchaseNFTCall__Outputs {
    return new PurchaseNFTCall__Outputs(this);
  }
}

export class PurchaseNFTCall__Inputs {
  _call: PurchaseNFTCall;

  constructor(call: PurchaseNFTCall) {
    this._call = call;
  }

  get listingId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get paymentToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class PurchaseNFTCall__Outputs {
  _call: PurchaseNFTCall;

  constructor(call: PurchaseNFTCall) {
    this._call = call;
  }
}

export class RemovePaymentTokenCall extends ethereum.Call {
  get inputs(): RemovePaymentTokenCall__Inputs {
    return new RemovePaymentTokenCall__Inputs(this);
  }

  get outputs(): RemovePaymentTokenCall__Outputs {
    return new RemovePaymentTokenCall__Outputs(this);
  }
}

export class RemovePaymentTokenCall__Inputs {
  _call: RemovePaymentTokenCall;

  constructor(call: RemovePaymentTokenCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemovePaymentTokenCall__Outputs {
  _call: RemovePaymentTokenCall;

  constructor(call: RemovePaymentTokenCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RevokeNFTContractCall extends ethereum.Call {
  get inputs(): RevokeNFTContractCall__Inputs {
    return new RevokeNFTContractCall__Inputs(this);
  }

  get outputs(): RevokeNFTContractCall__Outputs {
    return new RevokeNFTContractCall__Outputs(this);
  }
}

export class RevokeNFTContractCall__Inputs {
  _call: RevokeNFTContractCall;

  constructor(call: RevokeNFTContractCall) {
    this._call = call;
  }

  get nftContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RevokeNFTContractCall__Outputs {
  _call: RevokeNFTContractCall;

  constructor(call: RevokeNFTContractCall) {
    this._call = call;
  }
}

export class SetFeeRecipientCall extends ethereum.Call {
  get inputs(): SetFeeRecipientCall__Inputs {
    return new SetFeeRecipientCall__Inputs(this);
  }

  get outputs(): SetFeeRecipientCall__Outputs {
    return new SetFeeRecipientCall__Outputs(this);
  }
}

export class SetFeeRecipientCall__Inputs {
  _call: SetFeeRecipientCall;

  constructor(call: SetFeeRecipientCall) {
    this._call = call;
  }

  get newRecipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFeeRecipientCall__Outputs {
  _call: SetFeeRecipientCall;

  constructor(call: SetFeeRecipientCall) {
    this._call = call;
  }
}

export class SetPlatformFeeCall extends ethereum.Call {
  get inputs(): SetPlatformFeeCall__Inputs {
    return new SetPlatformFeeCall__Inputs(this);
  }

  get outputs(): SetPlatformFeeCall__Outputs {
    return new SetPlatformFeeCall__Outputs(this);
  }
}

export class SetPlatformFeeCall__Inputs {
  _call: SetPlatformFeeCall;

  constructor(call: SetPlatformFeeCall) {
    this._call = call;
  }

  get newFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetPlatformFeeCall__Outputs {
  _call: SetPlatformFeeCall;

  constructor(call: SetPlatformFeeCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateListingPriceCall extends ethereum.Call {
  get inputs(): UpdateListingPriceCall__Inputs {
    return new UpdateListingPriceCall__Inputs(this);
  }

  get outputs(): UpdateListingPriceCall__Outputs {
    return new UpdateListingPriceCall__Outputs(this);
  }
}

export class UpdateListingPriceCall__Inputs {
  _call: UpdateListingPriceCall;

  constructor(call: UpdateListingPriceCall) {
    this._call = call;
  }

  get listingId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newPrice(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateListingPriceCall__Outputs {
  _call: UpdateListingPriceCall;

  constructor(call: UpdateListingPriceCall) {
    this._call = call;
  }
}

export class UpdateListingTokensCall extends ethereum.Call {
  get inputs(): UpdateListingTokensCall__Inputs {
    return new UpdateListingTokensCall__Inputs(this);
  }

  get outputs(): UpdateListingTokensCall__Outputs {
    return new UpdateListingTokensCall__Outputs(this);
  }
}

export class UpdateListingTokensCall__Inputs {
  _call: UpdateListingTokensCall;

  constructor(call: UpdateListingTokensCall) {
    this._call = call;
  }

  get listingId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newAcceptedTokens(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class UpdateListingTokensCall__Outputs {
  _call: UpdateListingTokensCall;

  constructor(call: UpdateListingTokensCall) {
    this._call = call;
  }
}
