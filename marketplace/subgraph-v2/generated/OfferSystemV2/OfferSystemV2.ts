// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class FeeRecipientUpdated extends ethereum.Event {
  get params(): FeeRecipientUpdated__Params {
    return new FeeRecipientUpdated__Params(this);
  }
}

export class FeeRecipientUpdated__Params {
  _event: FeeRecipientUpdated;

  constructor(event: FeeRecipientUpdated) {
    this._event = event;
  }

  get oldRecipient(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newRecipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NFTContractApproved extends ethereum.Event {
  get params(): NFTContractApproved__Params {
    return new NFTContractApproved__Params(this);
  }
}

export class NFTContractApproved__Params {
  _event: NFTContractApproved;

  constructor(event: NFTContractApproved) {
    this._event = event;
  }

  get nftContract(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class NFTContractRevoked extends ethereum.Event {
  get params(): NFTContractRevoked__Params {
    return new NFTContractRevoked__Params(this);
  }
}

export class NFTContractRevoked__Params {
  _event: NFTContractRevoked;

  constructor(event: NFTContractRevoked) {
    this._event = event;
  }

  get nftContract(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OfferAccepted extends ethereum.Event {
  get params(): OfferAccepted__Params {
    return new OfferAccepted__Params(this);
  }
}

export class OfferAccepted__Params {
  _event: OfferAccepted;

  constructor(event: OfferAccepted) {
    this._event = event;
  }

  get offerId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get buyer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get seller(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get paymentToken(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get platformFeeAmount(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class OfferCancelled extends ethereum.Event {
  get params(): OfferCancelled__Params {
    return new OfferCancelled__Params(this);
  }
}

export class OfferCancelled__Params {
  _event: OfferCancelled;

  constructor(event: OfferCancelled) {
    this._event = event;
  }

  get offerId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get buyer(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OfferDeclined extends ethereum.Event {
  get params(): OfferDeclined__Params {
    return new OfferDeclined__Params(this);
  }
}

export class OfferDeclined__Params {
  _event: OfferDeclined;

  constructor(event: OfferDeclined) {
    this._event = event;
  }

  get offerId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get seller(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OfferExpired extends ethereum.Event {
  get params(): OfferExpired__Params {
    return new OfferExpired__Params(this);
  }
}

export class OfferExpired__Params {
  _event: OfferExpired;

  constructor(event: OfferExpired) {
    this._event = event;
  }

  get offerId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OfferMade extends ethereum.Event {
  get params(): OfferMade__Params {
    return new OfferMade__Params(this);
  }
}

export class OfferMade__Params {
  _event: OfferMade;

  constructor(event: OfferMade) {
    this._event = event;
  }

  get offerId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get buyer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get seller(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get nftType(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get nftContract(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get paymentToken(): Address {
    return this._event.parameters[7].value.toAddress();
  }

  get expiresAt(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PaymentTokenAdded extends ethereum.Event {
  get params(): PaymentTokenAdded__Params {
    return new PaymentTokenAdded__Params(this);
  }
}

export class PaymentTokenAdded__Params {
  _event: PaymentTokenAdded;

  constructor(event: PaymentTokenAdded) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PaymentTokenRemoved extends ethereum.Event {
  get params(): PaymentTokenRemoved__Params {
    return new PaymentTokenRemoved__Params(this);
  }
}

export class PaymentTokenRemoved__Params {
  _event: PaymentTokenRemoved;

  constructor(event: PaymentTokenRemoved) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PlatformFeeUpdated extends ethereum.Event {
  get params(): PlatformFeeUpdated__Params {
    return new PlatformFeeUpdated__Params(this);
  }
}

export class PlatformFeeUpdated__Params {
  _event: PlatformFeeUpdated;

  constructor(event: PlatformFeeUpdated) {
    this._event = event;
  }

  get oldFee(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newFee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OfferSystemV2__offersResult {
  value0: BigInt;
  value1: Address;
  value2: Address;
  value3: i32;
  value4: Address;
  value5: BigInt;
  value6: BigInt;
  value7: Address;
  value8: BigInt;
  value9: i32;
  value10: string;
  value11: BigInt;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: Address,
    value3: i32,
    value4: Address,
    value5: BigInt,
    value6: BigInt,
    value7: Address,
    value8: BigInt,
    value9: i32,
    value10: string,
    value11: BigInt,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
    this.value11 = value11;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3)),
    );
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromAddress(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set(
      "value9",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value9)),
    );
    map.set("value10", ethereum.Value.fromString(this.value10));
    map.set("value11", ethereum.Value.fromUnsignedBigInt(this.value11));
    return map;
  }

  getId(): BigInt {
    return this.value0;
  }

  getBuyer(): Address {
    return this.value1;
  }

  getSeller(): Address {
    return this.value2;
  }

  getNftType(): i32 {
    return this.value3;
  }

  getNftContract(): Address {
    return this.value4;
  }

  getTokenId(): BigInt {
    return this.value5;
  }

  getAmount(): BigInt {
    return this.value6;
  }

  getPaymentToken(): Address {
    return this.value7;
  }

  getExpiresAt(): BigInt {
    return this.value8;
  }

  getStatus(): i32 {
    return this.value9;
  }

  getMessage(): string {
    return this.value10;
  }

  getCreatedAt(): BigInt {
    return this.value11;
  }
}

export class OfferSystemV2 extends ethereum.SmartContract {
  static bind(address: Address): OfferSystemV2 {
    return new OfferSystemV2("OfferSystemV2", address);
  }

  MAX_FEE(): BigInt {
    let result = super.call("MAX_FEE", "MAX_FEE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MAX_FEE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MAX_FEE", "MAX_FEE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approvedNFTContracts(param0: Address): boolean {
    let result = super.call(
      "approvedNFTContracts",
      "approvedNFTContracts(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBoolean();
  }

  try_approvedNFTContracts(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "approvedNFTContracts",
      "approvedNFTContracts(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  feeRecipient(): Address {
    let result = super.call("feeRecipient", "feeRecipient():(address)", []);

    return result[0].toAddress();
  }

  try_feeRecipient(): ethereum.CallResult<Address> {
    let result = super.tryCall("feeRecipient", "feeRecipient():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCurrentOfferId(): BigInt {
    let result = super.call(
      "getCurrentOfferId",
      "getCurrentOfferId():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getCurrentOfferId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentOfferId",
      "getCurrentOfferId():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNFTOffers(nftContract: Address, tokenId: BigInt): Array<BigInt> {
    let result = super.call(
      "getNFTOffers",
      "getNFTOffers(address,uint256):(uint256[])",
      [
        ethereum.Value.fromAddress(nftContract),
        ethereum.Value.fromUnsignedBigInt(tokenId),
      ],
    );

    return result[0].toBigIntArray();
  }

  try_getNFTOffers(
    nftContract: Address,
    tokenId: BigInt,
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getNFTOffers",
      "getNFTOffers(address,uint256):(uint256[])",
      [
        ethereum.Value.fromAddress(nftContract),
        ethereum.Value.fromUnsignedBigInt(tokenId),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getSupportedTokens(): Array<Address> {
    let result = super.call(
      "getSupportedTokens",
      "getSupportedTokens():(address[])",
      [],
    );

    return result[0].toAddressArray();
  }

  try_getSupportedTokens(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getSupportedTokens",
      "getSupportedTokens():(address[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getUserOffersMade(user: Address): Array<BigInt> {
    let result = super.call(
      "getUserOffersMade",
      "getUserOffersMade(address):(uint256[])",
      [ethereum.Value.fromAddress(user)],
    );

    return result[0].toBigIntArray();
  }

  try_getUserOffersMade(user: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getUserOffersMade",
      "getUserOffersMade(address):(uint256[])",
      [ethereum.Value.fromAddress(user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getUserOffersReceived(user: Address): Array<BigInt> {
    let result = super.call(
      "getUserOffersReceived",
      "getUserOffersReceived(address):(uint256[])",
      [ethereum.Value.fromAddress(user)],
    );

    return result[0].toBigIntArray();
  }

  try_getUserOffersReceived(user: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getUserOffersReceived",
      "getUserOffersReceived(address):(uint256[])",
      [ethereum.Value.fromAddress(user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  isOfferValid(offerId: BigInt): boolean {
    let result = super.call("isOfferValid", "isOfferValid(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(offerId),
    ]);

    return result[0].toBoolean();
  }

  try_isOfferValid(offerId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOfferValid", "isOfferValid(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(offerId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  nftOffers(param0: Address, param1: BigInt, param2: BigInt): BigInt {
    let result = super.call(
      "nftOffers",
      "nftOffers(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
      ],
    );

    return result[0].toBigInt();
  }

  try_nftOffers(
    param0: Address,
    param1: BigInt,
    param2: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nftOffers",
      "nftOffers(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  offers(param0: BigInt): OfferSystemV2__offersResult {
    let result = super.call(
      "offers",
      "offers(uint256):(uint256,address,address,uint8,address,uint256,uint256,address,uint256,uint8,string,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new OfferSystemV2__offersResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toI32(),
      result[4].toAddress(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toAddress(),
      result[8].toBigInt(),
      result[9].toI32(),
      result[10].toString(),
      result[11].toBigInt(),
    );
  }

  try_offers(param0: BigInt): ethereum.CallResult<OfferSystemV2__offersResult> {
    let result = super.tryCall(
      "offers",
      "offers(uint256):(uint256,address,address,uint8,address,uint256,uint256,address,uint256,uint8,string,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OfferSystemV2__offersResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toI32(),
        value[4].toAddress(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toAddress(),
        value[8].toBigInt(),
        value[9].toI32(),
        value[10].toString(),
        value[11].toBigInt(),
      ),
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  platformFee(): BigInt {
    let result = super.call("platformFee", "platformFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_platformFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("platformFee", "platformFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportedTokens(param0: Address): boolean {
    let result = super.call(
      "supportedTokens",
      "supportedTokens(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBoolean();
  }

  try_supportedTokens(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportedTokens",
      "supportedTokens(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  tokenList(param0: BigInt): Address {
    let result = super.call("tokenList", "tokenList(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return result[0].toAddress();
  }

  try_tokenList(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("tokenList", "tokenList(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  userOffersMade(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "userOffersMade",
      "userOffersMade(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );

    return result[0].toBigInt();
  }

  try_userOffersMade(
    param0: Address,
    param1: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userOffersMade",
      "userOffersMade(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userOffersReceived(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "userOffersReceived",
      "userOffersReceived(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );

    return result[0].toBigInt();
  }

  try_userOffersReceived(
    param0: Address,
    param1: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userOffersReceived",
      "userOffersReceived(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _feeRecipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _supportedTokens(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get _nftContracts(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AcceptOfferCall extends ethereum.Call {
  get inputs(): AcceptOfferCall__Inputs {
    return new AcceptOfferCall__Inputs(this);
  }

  get outputs(): AcceptOfferCall__Outputs {
    return new AcceptOfferCall__Outputs(this);
  }
}

export class AcceptOfferCall__Inputs {
  _call: AcceptOfferCall;

  constructor(call: AcceptOfferCall) {
    this._call = call;
  }

  get offerId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class AcceptOfferCall__Outputs {
  _call: AcceptOfferCall;

  constructor(call: AcceptOfferCall) {
    this._call = call;
  }
}

export class AddPaymentTokenCall extends ethereum.Call {
  get inputs(): AddPaymentTokenCall__Inputs {
    return new AddPaymentTokenCall__Inputs(this);
  }

  get outputs(): AddPaymentTokenCall__Outputs {
    return new AddPaymentTokenCall__Outputs(this);
  }
}

export class AddPaymentTokenCall__Inputs {
  _call: AddPaymentTokenCall;

  constructor(call: AddPaymentTokenCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddPaymentTokenCall__Outputs {
  _call: AddPaymentTokenCall;

  constructor(call: AddPaymentTokenCall) {
    this._call = call;
  }
}

export class ApproveNFTContractCall extends ethereum.Call {
  get inputs(): ApproveNFTContractCall__Inputs {
    return new ApproveNFTContractCall__Inputs(this);
  }

  get outputs(): ApproveNFTContractCall__Outputs {
    return new ApproveNFTContractCall__Outputs(this);
  }
}

export class ApproveNFTContractCall__Inputs {
  _call: ApproveNFTContractCall;

  constructor(call: ApproveNFTContractCall) {
    this._call = call;
  }

  get nftContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ApproveNFTContractCall__Outputs {
  _call: ApproveNFTContractCall;

  constructor(call: ApproveNFTContractCall) {
    this._call = call;
  }
}

export class CancelOfferCall extends ethereum.Call {
  get inputs(): CancelOfferCall__Inputs {
    return new CancelOfferCall__Inputs(this);
  }

  get outputs(): CancelOfferCall__Outputs {
    return new CancelOfferCall__Outputs(this);
  }
}

export class CancelOfferCall__Inputs {
  _call: CancelOfferCall;

  constructor(call: CancelOfferCall) {
    this._call = call;
  }

  get offerId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelOfferCall__Outputs {
  _call: CancelOfferCall;

  constructor(call: CancelOfferCall) {
    this._call = call;
  }
}

export class DeclineOfferCall extends ethereum.Call {
  get inputs(): DeclineOfferCall__Inputs {
    return new DeclineOfferCall__Inputs(this);
  }

  get outputs(): DeclineOfferCall__Outputs {
    return new DeclineOfferCall__Outputs(this);
  }
}

export class DeclineOfferCall__Inputs {
  _call: DeclineOfferCall;

  constructor(call: DeclineOfferCall) {
    this._call = call;
  }

  get offerId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DeclineOfferCall__Outputs {
  _call: DeclineOfferCall;

  constructor(call: DeclineOfferCall) {
    this._call = call;
  }
}

export class EmergencyWithdrawCall extends ethereum.Call {
  get inputs(): EmergencyWithdrawCall__Inputs {
    return new EmergencyWithdrawCall__Inputs(this);
  }

  get outputs(): EmergencyWithdrawCall__Outputs {
    return new EmergencyWithdrawCall__Outputs(this);
  }
}

export class EmergencyWithdrawCall__Inputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class EmergencyWithdrawCall__Outputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }
}

export class MakeOfferCall extends ethereum.Call {
  get inputs(): MakeOfferCall__Inputs {
    return new MakeOfferCall__Inputs(this);
  }

  get outputs(): MakeOfferCall__Outputs {
    return new MakeOfferCall__Outputs(this);
  }
}

export class MakeOfferCall__Inputs {
  _call: MakeOfferCall;

  constructor(call: MakeOfferCall) {
    this._call = call;
  }

  get seller(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get nftType(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get nftContract(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get paymentToken(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get duration(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get message(): string {
    return this._call.inputValues[7].value.toString();
  }
}

export class MakeOfferCall__Outputs {
  _call: MakeOfferCall;

  constructor(call: MakeOfferCall) {
    this._call = call;
  }
}

export class ProcessExpiredOffersCall extends ethereum.Call {
  get inputs(): ProcessExpiredOffersCall__Inputs {
    return new ProcessExpiredOffersCall__Inputs(this);
  }

  get outputs(): ProcessExpiredOffersCall__Outputs {
    return new ProcessExpiredOffersCall__Outputs(this);
  }
}

export class ProcessExpiredOffersCall__Inputs {
  _call: ProcessExpiredOffersCall;

  constructor(call: ProcessExpiredOffersCall) {
    this._call = call;
  }

  get offerIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class ProcessExpiredOffersCall__Outputs {
  _call: ProcessExpiredOffersCall;

  constructor(call: ProcessExpiredOffersCall) {
    this._call = call;
  }
}

export class RemovePaymentTokenCall extends ethereum.Call {
  get inputs(): RemovePaymentTokenCall__Inputs {
    return new RemovePaymentTokenCall__Inputs(this);
  }

  get outputs(): RemovePaymentTokenCall__Outputs {
    return new RemovePaymentTokenCall__Outputs(this);
  }
}

export class RemovePaymentTokenCall__Inputs {
  _call: RemovePaymentTokenCall;

  constructor(call: RemovePaymentTokenCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemovePaymentTokenCall__Outputs {
  _call: RemovePaymentTokenCall;

  constructor(call: RemovePaymentTokenCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RevokeNFTContractCall extends ethereum.Call {
  get inputs(): RevokeNFTContractCall__Inputs {
    return new RevokeNFTContractCall__Inputs(this);
  }

  get outputs(): RevokeNFTContractCall__Outputs {
    return new RevokeNFTContractCall__Outputs(this);
  }
}

export class RevokeNFTContractCall__Inputs {
  _call: RevokeNFTContractCall;

  constructor(call: RevokeNFTContractCall) {
    this._call = call;
  }

  get nftContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RevokeNFTContractCall__Outputs {
  _call: RevokeNFTContractCall;

  constructor(call: RevokeNFTContractCall) {
    this._call = call;
  }
}

export class SetFeeRecipientCall extends ethereum.Call {
  get inputs(): SetFeeRecipientCall__Inputs {
    return new SetFeeRecipientCall__Inputs(this);
  }

  get outputs(): SetFeeRecipientCall__Outputs {
    return new SetFeeRecipientCall__Outputs(this);
  }
}

export class SetFeeRecipientCall__Inputs {
  _call: SetFeeRecipientCall;

  constructor(call: SetFeeRecipientCall) {
    this._call = call;
  }

  get newRecipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFeeRecipientCall__Outputs {
  _call: SetFeeRecipientCall;

  constructor(call: SetFeeRecipientCall) {
    this._call = call;
  }
}

export class SetPlatformFeeCall extends ethereum.Call {
  get inputs(): SetPlatformFeeCall__Inputs {
    return new SetPlatformFeeCall__Inputs(this);
  }

  get outputs(): SetPlatformFeeCall__Outputs {
    return new SetPlatformFeeCall__Outputs(this);
  }
}

export class SetPlatformFeeCall__Inputs {
  _call: SetPlatformFeeCall;

  constructor(call: SetPlatformFeeCall) {
    this._call = call;
  }

  get newFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetPlatformFeeCall__Outputs {
  _call: SetPlatformFeeCall;

  constructor(call: SetPlatformFeeCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
