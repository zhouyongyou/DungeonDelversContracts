// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class MarketListingV2 extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MarketListingV2 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MarketListingV2 must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("MarketListingV2", id.toString(), this);
    }
  }

  static loadInBlock(id: string): MarketListingV2 | null {
    return changetype<MarketListingV2 | null>(
      store.get_in_block("MarketListingV2", id),
    );
  }

  static load(id: string): MarketListingV2 | null {
    return changetype<MarketListingV2 | null>(store.get("MarketListingV2", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get listingId(): BigInt {
    let value = this.get("listingId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set listingId(value: BigInt) {
    this.set("listingId", Value.fromBigInt(value));
  }

  get seller(): Bytes {
    let value = this.get("seller");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set seller(value: Bytes) {
    this.set("seller", Value.fromBytes(value));
  }

  get nftType(): string {
    let value = this.get("nftType");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set nftType(value: string) {
    this.set("nftType", Value.fromString(value));
  }

  get nftContract(): Bytes {
    let value = this.get("nftContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set nftContract(value: Bytes) {
    this.set("nftContract", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get price(): BigDecimal {
    let value = this.get("price");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set price(value: BigDecimal) {
    this.set("price", Value.fromBigDecimal(value));
  }

  get acceptedTokens(): Array<Bytes> {
    let value = this.get("acceptedTokens");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set acceptedTokens(value: Array<Bytes>) {
    this.set("acceptedTokens", Value.fromBytesArray(value));
  }

  get isActive(): boolean {
    let value = this.get("isActive");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isActive(value: boolean) {
    this.set("isActive", Value.fromBoolean(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get updatedAt(): BigInt {
    let value = this.get("updatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set updatedAt(value: BigInt) {
    this.set("updatedAt", Value.fromBigInt(value));
  }

  get expiresAt(): BigInt | null {
    let value = this.get("expiresAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set expiresAt(value: BigInt | null) {
    if (!value) {
      this.unset("expiresAt");
    } else {
      this.set("expiresAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get soldTransaction(): string | null {
    let value = this.get("soldTransaction");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set soldTransaction(value: string | null) {
    if (!value) {
      this.unset("soldTransaction");
    } else {
      this.set("soldTransaction", Value.fromString(<string>value));
    }
  }

  get priceUpdates(): ListingPriceUpdateV2Loader {
    return new ListingPriceUpdateV2Loader(
      "MarketListingV2",
      this.get("id")!.toString(),
      "priceUpdates",
    );
  }
}

export class MarketTransactionV2 extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MarketTransactionV2 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MarketTransactionV2 must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("MarketTransactionV2", id.toString(), this);
    }
  }

  static loadInBlock(id: string): MarketTransactionV2 | null {
    return changetype<MarketTransactionV2 | null>(
      store.get_in_block("MarketTransactionV2", id),
    );
  }

  static load(id: string): MarketTransactionV2 | null {
    return changetype<MarketTransactionV2 | null>(
      store.get("MarketTransactionV2", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get listingId(): BigInt {
    let value = this.get("listingId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set listingId(value: BigInt) {
    this.set("listingId", Value.fromBigInt(value));
  }

  get buyer(): Bytes {
    let value = this.get("buyer");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set buyer(value: Bytes) {
    this.set("buyer", Value.fromBytes(value));
  }

  get seller(): Bytes {
    let value = this.get("seller");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set seller(value: Bytes) {
    this.set("seller", Value.fromBytes(value));
  }

  get nftType(): string {
    let value = this.get("nftType");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set nftType(value: string) {
    this.set("nftType", Value.fromString(value));
  }

  get nftContract(): Bytes {
    let value = this.get("nftContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set nftContract(value: Bytes) {
    this.set("nftContract", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get price(): BigDecimal {
    let value = this.get("price");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set price(value: BigDecimal) {
    this.set("price", Value.fromBigDecimal(value));
  }

  get paymentToken(): Bytes {
    let value = this.get("paymentToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set paymentToken(value: Bytes) {
    this.set("paymentToken", Value.fromBytes(value));
  }

  get platformFee(): BigDecimal {
    let value = this.get("platformFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set platformFee(value: BigDecimal) {
    this.set("platformFee", Value.fromBigDecimal(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get listing(): string {
    let value = this.get("listing");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set listing(value: string) {
    this.set("listing", Value.fromString(value));
  }
}

export class ListingPriceUpdateV2 extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ListingPriceUpdateV2 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ListingPriceUpdateV2 must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ListingPriceUpdateV2", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ListingPriceUpdateV2 | null {
    return changetype<ListingPriceUpdateV2 | null>(
      store.get_in_block("ListingPriceUpdateV2", id),
    );
  }

  static load(id: string): ListingPriceUpdateV2 | null {
    return changetype<ListingPriceUpdateV2 | null>(
      store.get("ListingPriceUpdateV2", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get listingId(): BigInt {
    let value = this.get("listingId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set listingId(value: BigInt) {
    this.set("listingId", Value.fromBigInt(value));
  }

  get oldPrice(): BigDecimal {
    let value = this.get("oldPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set oldPrice(value: BigDecimal) {
    this.set("oldPrice", Value.fromBigDecimal(value));
  }

  get newPrice(): BigDecimal {
    let value = this.get("newPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set newPrice(value: BigDecimal) {
    this.set("newPrice", Value.fromBigDecimal(value));
  }

  get oldAcceptedTokens(): Array<Bytes> {
    let value = this.get("oldAcceptedTokens");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set oldAcceptedTokens(value: Array<Bytes>) {
    this.set("oldAcceptedTokens", Value.fromBytesArray(value));
  }

  get newAcceptedTokens(): Array<Bytes> {
    let value = this.get("newAcceptedTokens");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set newAcceptedTokens(value: Array<Bytes>) {
    this.set("newAcceptedTokens", Value.fromBytesArray(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get listing(): string {
    let value = this.get("listing");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set listing(value: string) {
    this.set("listing", Value.fromString(value));
  }
}

export class OfferV2 extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OfferV2 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type OfferV2 must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("OfferV2", id.toString(), this);
    }
  }

  static loadInBlock(id: string): OfferV2 | null {
    return changetype<OfferV2 | null>(store.get_in_block("OfferV2", id));
  }

  static load(id: string): OfferV2 | null {
    return changetype<OfferV2 | null>(store.get("OfferV2", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get offerId(): BigInt {
    let value = this.get("offerId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set offerId(value: BigInt) {
    this.set("offerId", Value.fromBigInt(value));
  }

  get offerer(): Bytes {
    let value = this.get("offerer");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set offerer(value: Bytes) {
    this.set("offerer", Value.fromBytes(value));
  }

  get targetAddress(): Bytes {
    let value = this.get("targetAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set targetAddress(value: Bytes) {
    this.set("targetAddress", Value.fromBytes(value));
  }

  get nftType(): string {
    let value = this.get("nftType");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set nftType(value: string) {
    this.set("nftType", Value.fromString(value));
  }

  get nftContract(): Bytes {
    let value = this.get("nftContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set nftContract(value: Bytes) {
    this.set("nftContract", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get offerAmount(): BigDecimal {
    let value = this.get("offerAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set offerAmount(value: BigDecimal) {
    this.set("offerAmount", Value.fromBigDecimal(value));
  }

  get paymentToken(): Bytes {
    let value = this.get("paymentToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set paymentToken(value: Bytes) {
    this.set("paymentToken", Value.fromBytes(value));
  }

  get expirationTime(): BigInt {
    let value = this.get("expirationTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set expirationTime(value: BigInt) {
    this.set("expirationTime", Value.fromBigInt(value));
  }

  get message(): string | null {
    let value = this.get("message");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set message(value: string | null) {
    if (!value) {
      this.unset("message");
    } else {
      this.set("message", Value.fromString(<string>value));
    }
  }

  get status(): string {
    let value = this.get("status");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get updatedAt(): BigInt {
    let value = this.get("updatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set updatedAt(value: BigInt) {
    this.set("updatedAt", Value.fromBigInt(value));
  }

  get acceptedTransaction(): string | null {
    let value = this.get("acceptedTransaction");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set acceptedTransaction(value: string | null) {
    if (!value) {
      this.unset("acceptedTransaction");
    } else {
      this.set("acceptedTransaction", Value.fromString(<string>value));
    }
  }
}

export class OfferTransactionV2 extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OfferTransactionV2 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type OfferTransactionV2 must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("OfferTransactionV2", id.toString(), this);
    }
  }

  static loadInBlock(id: string): OfferTransactionV2 | null {
    return changetype<OfferTransactionV2 | null>(
      store.get_in_block("OfferTransactionV2", id),
    );
  }

  static load(id: string): OfferTransactionV2 | null {
    return changetype<OfferTransactionV2 | null>(
      store.get("OfferTransactionV2", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get offerId(): BigInt {
    let value = this.get("offerId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set offerId(value: BigInt) {
    this.set("offerId", Value.fromBigInt(value));
  }

  get offerer(): Bytes {
    let value = this.get("offerer");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set offerer(value: Bytes) {
    this.set("offerer", Value.fromBytes(value));
  }

  get accepter(): Bytes {
    let value = this.get("accepter");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set accepter(value: Bytes) {
    this.set("accepter", Value.fromBytes(value));
  }

  get nftType(): string {
    let value = this.get("nftType");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set nftType(value: string) {
    this.set("nftType", Value.fromString(value));
  }

  get nftContract(): Bytes {
    let value = this.get("nftContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set nftContract(value: Bytes) {
    this.set("nftContract", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get offerAmount(): BigDecimal {
    let value = this.get("offerAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set offerAmount(value: BigDecimal) {
    this.set("offerAmount", Value.fromBigDecimal(value));
  }

  get paymentToken(): Bytes {
    let value = this.get("paymentToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set paymentToken(value: Bytes) {
    this.set("paymentToken", Value.fromBytes(value));
  }

  get platformFee(): BigDecimal {
    let value = this.get("platformFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set platformFee(value: BigDecimal) {
    this.set("platformFee", Value.fromBigDecimal(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get offer(): string {
    let value = this.get("offer");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set offer(value: string) {
    this.set("offer", Value.fromString(value));
  }
}

export class MarketStatsV2 extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MarketStatsV2 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MarketStatsV2 must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("MarketStatsV2", id.toString(), this);
    }
  }

  static loadInBlock(id: string): MarketStatsV2 | null {
    return changetype<MarketStatsV2 | null>(
      store.get_in_block("MarketStatsV2", id),
    );
  }

  static load(id: string): MarketStatsV2 | null {
    return changetype<MarketStatsV2 | null>(store.get("MarketStatsV2", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalListings(): BigInt {
    let value = this.get("totalListings");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalListings(value: BigInt) {
    this.set("totalListings", Value.fromBigInt(value));
  }

  get activeListings(): BigInt {
    let value = this.get("activeListings");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set activeListings(value: BigInt) {
    this.set("activeListings", Value.fromBigInt(value));
  }

  get totalSales(): BigInt {
    let value = this.get("totalSales");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalSales(value: BigInt) {
    this.set("totalSales", Value.fromBigInt(value));
  }

  get totalVolume(): BigDecimal {
    let value = this.get("totalVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalVolume(value: BigDecimal) {
    this.set("totalVolume", Value.fromBigDecimal(value));
  }

  get totalVolumeByToken(): Array<string> {
    let value = this.get("totalVolumeByToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set totalVolumeByToken(value: Array<string>) {
    this.set("totalVolumeByToken", Value.fromStringArray(value));
  }

  get totalOffers(): BigInt {
    let value = this.get("totalOffers");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalOffers(value: BigInt) {
    this.set("totalOffers", Value.fromBigInt(value));
  }

  get activeOffers(): BigInt {
    let value = this.get("activeOffers");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set activeOffers(value: BigInt) {
    this.set("activeOffers", Value.fromBigInt(value));
  }

  get platformFeesCollected(): BigDecimal {
    let value = this.get("platformFeesCollected");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set platformFeesCollected(value: BigDecimal) {
    this.set("platformFeesCollected", Value.fromBigDecimal(value));
  }

  get platformFeesCollectedByToken(): Array<string> {
    let value = this.get("platformFeesCollectedByToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set platformFeesCollectedByToken(value: Array<string>) {
    this.set("platformFeesCollectedByToken", Value.fromStringArray(value));
  }

  get lastUpdated(): BigInt {
    let value = this.get("lastUpdated");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastUpdated(value: BigInt) {
    this.set("lastUpdated", Value.fromBigInt(value));
  }
}

export class TokenSupport extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokenSupport entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TokenSupport must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TokenSupport", id.toString(), this);
    }
  }

  static loadInBlock(id: string): TokenSupport | null {
    return changetype<TokenSupport | null>(
      store.get_in_block("TokenSupport", id),
    );
  }

  static load(id: string): TokenSupport | null {
    return changetype<TokenSupport | null>(store.get("TokenSupport", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get isSupported(): boolean {
    let value = this.get("isSupported");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isSupported(value: boolean) {
    this.set("isSupported", Value.fromBoolean(value));
  }

  get symbol(): string | null {
    let value = this.get("symbol");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set symbol(value: string | null) {
    if (!value) {
      this.unset("symbol");
    } else {
      this.set("symbol", Value.fromString(<string>value));
    }
  }

  get name(): string | null {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (!value) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(<string>value));
    }
  }

  get decimals(): BigInt | null {
    let value = this.get("decimals");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set decimals(value: BigInt | null) {
    if (!value) {
      this.unset("decimals");
    } else {
      this.set("decimals", Value.fromBigInt(<BigInt>value));
    }
  }

  get addedAt(): BigInt {
    let value = this.get("addedAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set addedAt(value: BigInt) {
    this.set("addedAt", Value.fromBigInt(value));
  }

  get updatedAt(): BigInt {
    let value = this.get("updatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set updatedAt(value: BigInt) {
    this.set("updatedAt", Value.fromBigInt(value));
  }
}

export class TokenVolume extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokenVolume entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TokenVolume must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TokenVolume", id.toString(), this);
    }
  }

  static loadInBlock(id: string): TokenVolume | null {
    return changetype<TokenVolume | null>(
      store.get_in_block("TokenVolume", id),
    );
  }

  static load(id: string): TokenVolume | null {
    return changetype<TokenVolume | null>(store.get("TokenVolume", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get volume(): BigDecimal {
    let value = this.get("volume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set volume(value: BigDecimal) {
    this.set("volume", Value.fromBigDecimal(value));
  }

  get platformFees(): BigDecimal {
    let value = this.get("platformFees");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set platformFees(value: BigDecimal) {
    this.set("platformFees", Value.fromBigDecimal(value));
  }
}

export class DailyMarketStatsV2 extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DailyMarketStatsV2 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DailyMarketStatsV2 must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("DailyMarketStatsV2", id.toString(), this);
    }
  }

  static loadInBlock(id: string): DailyMarketStatsV2 | null {
    return changetype<DailyMarketStatsV2 | null>(
      store.get_in_block("DailyMarketStatsV2", id),
    );
  }

  static load(id: string): DailyMarketStatsV2 | null {
    return changetype<DailyMarketStatsV2 | null>(
      store.get("DailyMarketStatsV2", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): BigInt {
    let value = this.get("date");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set date(value: BigInt) {
    this.set("date", Value.fromBigInt(value));
  }

  get listings(): BigInt {
    let value = this.get("listings");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set listings(value: BigInt) {
    this.set("listings", Value.fromBigInt(value));
  }

  get sales(): BigInt {
    let value = this.get("sales");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set sales(value: BigInt) {
    this.set("sales", Value.fromBigInt(value));
  }

  get volume(): BigDecimal {
    let value = this.get("volume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set volume(value: BigDecimal) {
    this.set("volume", Value.fromBigDecimal(value));
  }

  get volumeByToken(): Array<string> {
    let value = this.get("volumeByToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set volumeByToken(value: Array<string>) {
    this.set("volumeByToken", Value.fromStringArray(value));
  }

  get uniqueBuyers(): BigInt {
    let value = this.get("uniqueBuyers");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set uniqueBuyers(value: BigInt) {
    this.set("uniqueBuyers", Value.fromBigInt(value));
  }

  get uniqueSellers(): BigInt {
    let value = this.get("uniqueSellers");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set uniqueSellers(value: BigInt) {
    this.set("uniqueSellers", Value.fromBigInt(value));
  }

  get offers(): BigInt {
    let value = this.get("offers");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set offers(value: BigInt) {
    this.set("offers", Value.fromBigInt(value));
  }

  get offersAccepted(): BigInt {
    let value = this.get("offersAccepted");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set offersAccepted(value: BigInt) {
    this.set("offersAccepted", Value.fromBigInt(value));
  }
}

export class HourlyMarketStatsV2 extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save HourlyMarketStatsV2 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type HourlyMarketStatsV2 must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("HourlyMarketStatsV2", id.toString(), this);
    }
  }

  static loadInBlock(id: string): HourlyMarketStatsV2 | null {
    return changetype<HourlyMarketStatsV2 | null>(
      store.get_in_block("HourlyMarketStatsV2", id),
    );
  }

  static load(id: string): HourlyMarketStatsV2 | null {
    return changetype<HourlyMarketStatsV2 | null>(
      store.get("HourlyMarketStatsV2", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get hour(): BigInt {
    let value = this.get("hour");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set hour(value: BigInt) {
    this.set("hour", Value.fromBigInt(value));
  }

  get listings(): BigInt {
    let value = this.get("listings");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set listings(value: BigInt) {
    this.set("listings", Value.fromBigInt(value));
  }

  get sales(): BigInt {
    let value = this.get("sales");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set sales(value: BigInt) {
    this.set("sales", Value.fromBigInt(value));
  }

  get volume(): BigDecimal {
    let value = this.get("volume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set volume(value: BigDecimal) {
    this.set("volume", Value.fromBigDecimal(value));
  }

  get volumeByToken(): Array<string> {
    let value = this.get("volumeByToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set volumeByToken(value: Array<string>) {
    this.set("volumeByToken", Value.fromStringArray(value));
  }

  get uniqueBuyers(): BigInt {
    let value = this.get("uniqueBuyers");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set uniqueBuyers(value: BigInt) {
    this.set("uniqueBuyers", Value.fromBigInt(value));
  }

  get uniqueSellers(): BigInt {
    let value = this.get("uniqueSellers");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set uniqueSellers(value: BigInt) {
    this.set("uniqueSellers", Value.fromBigInt(value));
  }

  get offers(): BigInt {
    let value = this.get("offers");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set offers(value: BigInt) {
    this.set("offers", Value.fromBigInt(value));
  }

  get offersAccepted(): BigInt {
    let value = this.get("offersAccepted");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set offersAccepted(value: BigInt) {
    this.set("offersAccepted", Value.fromBigInt(value));
  }
}

export class UserMarketStatsV2 extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserMarketStatsV2 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UserMarketStatsV2 must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("UserMarketStatsV2", id.toString(), this);
    }
  }

  static loadInBlock(id: string): UserMarketStatsV2 | null {
    return changetype<UserMarketStatsV2 | null>(
      store.get_in_block("UserMarketStatsV2", id),
    );
  }

  static load(id: string): UserMarketStatsV2 | null {
    return changetype<UserMarketStatsV2 | null>(
      store.get("UserMarketStatsV2", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get userAddress(): Bytes {
    let value = this.get("userAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set userAddress(value: Bytes) {
    this.set("userAddress", Value.fromBytes(value));
  }

  get totalListings(): BigInt {
    let value = this.get("totalListings");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalListings(value: BigInt) {
    this.set("totalListings", Value.fromBigInt(value));
  }

  get totalSales(): BigInt {
    let value = this.get("totalSales");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalSales(value: BigInt) {
    this.set("totalSales", Value.fromBigInt(value));
  }

  get totalPurchases(): BigInt {
    let value = this.get("totalPurchases");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalPurchases(value: BigInt) {
    this.set("totalPurchases", Value.fromBigInt(value));
  }

  get totalVolumeAsSeller(): BigDecimal {
    let value = this.get("totalVolumeAsSeller");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalVolumeAsSeller(value: BigDecimal) {
    this.set("totalVolumeAsSeller", Value.fromBigDecimal(value));
  }

  get totalVolumeAsBuyer(): BigDecimal {
    let value = this.get("totalVolumeAsBuyer");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalVolumeAsBuyer(value: BigDecimal) {
    this.set("totalVolumeAsBuyer", Value.fromBigDecimal(value));
  }

  get totalOffersMade(): BigInt {
    let value = this.get("totalOffersMade");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalOffersMade(value: BigInt) {
    this.set("totalOffersMade", Value.fromBigInt(value));
  }

  get totalOffersReceived(): BigInt {
    let value = this.get("totalOffersReceived");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalOffersReceived(value: BigInt) {
    this.set("totalOffersReceived", Value.fromBigInt(value));
  }

  get totalOffersAccepted(): BigInt {
    let value = this.get("totalOffersAccepted");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalOffersAccepted(value: BigInt) {
    this.set("totalOffersAccepted", Value.fromBigInt(value));
  }

  get firstActivityAt(): BigInt {
    let value = this.get("firstActivityAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set firstActivityAt(value: BigInt) {
    this.set("firstActivityAt", Value.fromBigInt(value));
  }

  get lastActivityAt(): BigInt {
    let value = this.get("lastActivityAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastActivityAt(value: BigInt) {
    this.set("lastActivityAt", Value.fromBigInt(value));
  }
}

export class NFTMarketStatsV2 extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NFTMarketStatsV2 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NFTMarketStatsV2 must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("NFTMarketStatsV2", id.toString(), this);
    }
  }

  static loadInBlock(id: string): NFTMarketStatsV2 | null {
    return changetype<NFTMarketStatsV2 | null>(
      store.get_in_block("NFTMarketStatsV2", id),
    );
  }

  static load(id: string): NFTMarketStatsV2 | null {
    return changetype<NFTMarketStatsV2 | null>(
      store.get("NFTMarketStatsV2", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get nftContract(): Bytes {
    let value = this.get("nftContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set nftContract(value: Bytes) {
    this.set("nftContract", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get nftType(): string {
    let value = this.get("nftType");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set nftType(value: string) {
    this.set("nftType", Value.fromString(value));
  }

  get totalListings(): BigInt {
    let value = this.get("totalListings");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalListings(value: BigInt) {
    this.set("totalListings", Value.fromBigInt(value));
  }

  get totalSales(): BigInt {
    let value = this.get("totalSales");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalSales(value: BigInt) {
    this.set("totalSales", Value.fromBigInt(value));
  }

  get highestSalePrice(): BigDecimal | null {
    let value = this.get("highestSalePrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set highestSalePrice(value: BigDecimal | null) {
    if (!value) {
      this.unset("highestSalePrice");
    } else {
      this.set("highestSalePrice", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get lowestSalePrice(): BigDecimal | null {
    let value = this.get("lowestSalePrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set lowestSalePrice(value: BigDecimal | null) {
    if (!value) {
      this.unset("lowestSalePrice");
    } else {
      this.set("lowestSalePrice", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get lastSalePrice(): BigDecimal | null {
    let value = this.get("lastSalePrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set lastSalePrice(value: BigDecimal | null) {
    if (!value) {
      this.unset("lastSalePrice");
    } else {
      this.set("lastSalePrice", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get lastSaleToken(): Bytes | null {
    let value = this.get("lastSaleToken");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set lastSaleToken(value: Bytes | null) {
    if (!value) {
      this.unset("lastSaleToken");
    } else {
      this.set("lastSaleToken", Value.fromBytes(<Bytes>value));
    }
  }

  get averageSalePrice(): BigDecimal | null {
    let value = this.get("averageSalePrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set averageSalePrice(value: BigDecimal | null) {
    if (!value) {
      this.unset("averageSalePrice");
    } else {
      this.set("averageSalePrice", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get totalOffers(): BigInt {
    let value = this.get("totalOffers");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalOffers(value: BigInt) {
    this.set("totalOffers", Value.fromBigInt(value));
  }

  get highestOfferAmount(): BigDecimal | null {
    let value = this.get("highestOfferAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set highestOfferAmount(value: BigDecimal | null) {
    if (!value) {
      this.unset("highestOfferAmount");
    } else {
      this.set("highestOfferAmount", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get lastListingPrice(): BigDecimal | null {
    let value = this.get("lastListingPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set lastListingPrice(value: BigDecimal | null) {
    if (!value) {
      this.unset("lastListingPrice");
    } else {
      this.set("lastListingPrice", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get lastListingTokens(): Array<Bytes> | null {
    let value = this.get("lastListingTokens");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set lastListingTokens(value: Array<Bytes> | null) {
    if (!value) {
      this.unset("lastListingTokens");
    } else {
      this.set("lastListingTokens", Value.fromBytesArray(<Array<Bytes>>value));
    }
  }

  get firstSaleAt(): BigInt | null {
    let value = this.get("firstSaleAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set firstSaleAt(value: BigInt | null) {
    if (!value) {
      this.unset("firstSaleAt");
    } else {
      this.set("firstSaleAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get lastSaleAt(): BigInt | null {
    let value = this.get("lastSaleAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lastSaleAt(value: BigInt | null) {
    if (!value) {
      this.unset("lastSaleAt");
    } else {
      this.set("lastSaleAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get lastListingAt(): BigInt | null {
    let value = this.get("lastListingAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lastListingAt(value: BigInt | null) {
    if (!value) {
      this.unset("lastListingAt");
    } else {
      this.set("lastListingAt", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class ListingPriceUpdateV2Loader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): ListingPriceUpdateV2[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<ListingPriceUpdateV2[]>(value);
  }
}
